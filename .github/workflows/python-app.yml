name: Python application

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Reduced from 120 to 60 minutes

    strategy:
      matrix:
        python-version: [3.9, "3.11.5", "3.12.x"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.python-version }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -e .
        pip install flake8 black mypy pytest pytest-cov build twine

    - name: Install TensorFlow (Python 3.9 and 3.11 only)
      if: matrix.python-version != '3.12.x'
      run: |
        if [ "${{ matrix.python-version }}" = "3.11.5" ]; then
          pip install tensorflow==2.14.0
        else
          pip install tensorflow==2.13.0
        fi

    - name: Install PyTorch
      run: |
        if [ "${{ matrix.python-version }}" = "3.12.x" ]; then
          pip install --pre torch torchvision --index-url https://download.pytorch.org/whl/nightly/cpu
        else
          pip install torch==2.1.2 torchvision==0.16.2
        fi

    - name: Log versions and environment info
      run: |
        python --version
        pip --version
        pip list
        if [ "${{ matrix.python-version }}" != "3.12.x" ]; then
          python -c "import tensorflow as tf; print(f'TensorFlow version: {tf.__version__}')"
        fi
        python -c "import torch; print(f'PyTorch version: {torch.__version__}')"

    - name: Lint with flake8
      run: flake8 .

    - name: Check formatting with black
      run: black --check .

    - name: Type check with mypy
      run: mypy .

    - name: Test FastThinkNet import
      run: python -c "import FastThinkNet; print(FastThinkNet.__version__)"

    - name: Run tests with coverage
      run: pytest -v -ra --cov=FastThinkNet --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

    - name: Build package
      run: python -m build

    - name: Check distribution
      run: twine check dist/*

    - name: Test package installation
      run: |
        python -m venv test_env
        source test_env/bin/activate
        pip install dist/*.whl
        python -c "import FastThinkNet; print(FastThinkNet.__version__)"
        deactivate

    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: logs
        path: |
          ~/.cache/pip
          **/build.log
          **/pip.log