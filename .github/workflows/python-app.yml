name: Python application

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ github.workspace }}

    strategy:
      matrix:
        python-version: [3.9, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Print Python and pip versions
      run: |
        python --version
        pip --version
    - name: List directory contents and print requirements.txt
      run: |
        ls -la
        echo "Contents of requirements.txt:"
        cat requirements.txt
    - name: Clear cache
      run: |
        pip cache purge
        rm -rf ~/.cache/pip
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || (echo "pip install failed" && cat /home/runner/.pip/pip.log && exit 1)
        pip install -e . || (echo "FastThinkNet installation failed" && exit 1)
        pip install torch tensorflow || (echo "PyTorch/TensorFlow installation failed" && exit 1)
    - name: Debug environment and package installation
      run: |
        echo "Current working directory:"
        pwd
        echo "Contents of site-packages:"
        ls -R $(python -c "import site; print(site.getsitepackages()[0])")
        echo "Python path:"
        python -c "import sys; print('\n'.join(sys.path))"
        echo "Installed packages:"
        pip list
        echo "FastThinkNet package info:"
        pip show FastThinkNet
        echo "FastThinkNet package location:"
        python -c "import FastThinkNet; print(FastThinkNet.__file__)" || echo "FastThinkNet import failed"
    - name: Check CUDA availability
      run: |
        python -c "import torch; print('CUDA available:', torch.cuda.is_available())"
        python -c "import tensorflow as tf; print('GPU available:', tf.test.is_built_with_cuda())"
    - name: Install pytest
      run: |
        python -m pip install --upgrade pip
        pip install pytest
    - name: Test with pytest
      run: |
        pytest -v -ra